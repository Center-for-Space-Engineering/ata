/*****************************************************************************

    MCC 134 Functions Demonstrated:
        mcc134_t_in_read
        mcc134_tc_type_write
        mcc134_info

    Purpose:
        Read a single data value for each channel in a loop.

    Description:
        This example demonstrates acquiring data using a software timed loop
        to read a single value from each selected channel on each iteration
        of the loop.

*****************************************************************************/
#include "daqhats_utils.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <math.h>

const int size = 450;

void print_chars(FILE*, char*);
double calc_deviation(double bin[size]);

int main()
{
    uint8_t address;
    uint8_t channel;
    double value;
    double valueF;
    uint8_t low_chan;
    uint8_t high_chan;
    uint8_t tc_type = TC_TYPE_T;    // change this to desired thermocouple typehow to print the last 10 characters of a string in C
    //char c;
    int result = RESULT_SUCCESS;
    int samples_per_channel = 0;
    int delay_between_reads = 500;  // ms
    int num_channels = mcc134_info()->NUM_AI_CHANNELS;
    char tc_type_str[10];

    double bin0[size], bin1[size], bin2[size], bin3[size], bin4[size], bin5[size], bin6[size], bin7[size], bin8[size], bin9[size], bin10[size], bin11[size];
    double deviation;
    int j0 = 0, j1 = 0, j2 = 0, j3 = 0, j4 = 0, j5 = 0, j6 = 0, j7 = 0, j8 = 0, j9 = 0, j10 = 0, j11 = 0;
    int fill0 = 0, fill1 = 0, fill2 = 0, fill3 = 0, fill4 = 0, fill5 = 0, fill6 = 0, fill7 = 0, fill8 = 0, fill9 = 0, fill10 = 0, fill11 = 0;

    // setup file for data to be read to
    FILE *data, *current;
    char filename[50];
    printf("\n Enter filename1 to record temperature data to (include .csv): ");
    gets(filename);
    data = fopen(filename, "w");
    
    // setup for timestamp 
    time_t seconds;
    
    low_chan = 0;
    high_chan = num_channels - 1;
    
    uint8_t temp;
    for(int i = 2; i < 5; i++)
    {
        temp = (uint8_t)i;
        address = temp;
        result  = mcc134_open(address);
        STOP_ON_ERROR(result);
        for (channel = low_chan; channel <= high_chan; channel++)
        {
            result = mcc134_tc_type_write(address, channel, tc_type);
            STOP_ON_ERROR(result);
        } 
    }

    convert_tc_type_to_string(tc_type, tc_type_str);
    
    printf("\nMCC 134 single data value read example\n");
    printf("    Function demonstrated: mcc134_t_in_read\n");
    printf("    Channels: %d - %d\n", low_chan, high_chan);
    printf("    Thermocouple type: %s\n", tc_type_str);

    printf("Acquiring data ... Press 'Enter' to abort\n\n");

    // Display the header row for the data table
    fprintf(data, "Sample,Timestamp(d:hh:mm:ss),Channel 0,SS,Channel 1,SS,Channel 2,SS,Channel 3,SS,Channel 4,SS,Channel 5,SS,Channel 6,SS,Channel 7,SS,Channel 8,SS,Channel 9,SS,Channel 10,SS,Channel 11,SS\n");
    
    double right, left, center;

    while (!enter_press())
    {
        // Display the updated samples per channel
        seconds = time(NULL);
        samples_per_channel++;
        fprintf(data, "%d,", samples_per_channel);
        print_chars(data, ctime(&seconds));
        system("clear");
        // Read a single value from each selected channel
        for(int i = 2; i < 5; i++)
        {
            temp = (uint8_t)i;
            address = temp;
            result  = mcc134_open(address);
            STOP_ON_ERROR(result);
            for (channel = low_chan; channel <= high_chan; channel++)
            {
                result = mcc134_t_in_read(address, channel, &value);
                STOP_ON_ERROR(result);
                valueF = value*1.8 + 32.0;
                if (value == OPEN_TC_VALUE)
                {
                    fprintf(data,"Open,");
                }
                else if (value == OVERRANGE_TC_VALUE)
                {
                    fprintf(data,"OverRange,");
                }
                else if (value == COMMON_MODE_TC_VALUE)
                {
                    fprintf(data,"Common Mode,");
                }
                else 
                {
                    fprintf(data, "%12.2f,", valueF);
                }
                
                switch(address) 
                { 
                    case 2:
                        switch(channel) 
                        {
                            case 0:
                                right = valueF;
                                bin0[j0] = valueF;
                                j0++;
                                if(j0 == size)
                                {
                                    j0 = 0;
                                    fill0++;
                                }
                                if(fill0 >= 1)
                                {
                                    deviation = calc_deviation(bin0);
                                    if(deviation < 0.25)
                                    {
                                        fprintf(data, "Y,");
                                        printf("Channel 0: SS\t\t"); // Steady state
                                    }
                                    else
                                    {
                                        fprintf(data,"N,");
                                        printf("Channel 0: T\t\t"); // Transient
                                    }
                                }
                                else 
                                {
                                    fprintf(data,"N,");
                                    printf("Channel 0: T\t\t");
                                }
                                break;
                            case 1: 
                                left = valueF;
                                bin1[j1] = valueF;
                                j1++;
                                if(j1 == size)
                                {
                                    j1 = 0;
                                    fill1++;
                                }
                                if(fill1 >= 1)
                                {
                                    deviation = calc_deviation(bin1);
                                    if(deviation < 0.25)
                                    {
                                        fprintf(data, "Y,");
                                        printf("Channel 1: SS\t\t");
                                    }
                                    else
                                    {
                                        fprintf(data,"N,");
                                        printf("Channel 1: T\t\t\t");
                                    }
                                }
                                else 
                                {
                                    fprintf(data,"N,");
                                    printf("Channel 1: T\t\t\t");
                                }
                                break;
                            case 2: 
                                center = valueF;
                                bin2[j2] = valueF;
                                j2++;
                                if(j2 == size)
                                {
                                    j2 = 0;
                                    fill2++;
                                }
                                if(fill2 >= 1)
                                {
                                    deviation = calc_deviation(bin2);
                                    if(deviation < 0.25)
                                    {
                                        fprintf(data, "Y,");
                                        printf("Channel 2: SS\t\t");
                                    }
                                    else
                                    {
                                        fprintf(data,"N,");
                                        printf("Channel 2: T\t\t");
                                    }
                                }
                                else 
                                {
                                    fprintf(data,"N,");
                                    printf("Channel 2: T\t\t");
                                }
                                break;
                            case 3:
                                bin3[j3] = valueF;
                                j3++;
                                if(j3 == size)
                                {
                                    j3 = 0;
                                    fill3++;
                                }
                                if(fill3 >= 1)
                                {
                                    deviation = calc_deviation(bin3);
                                    if(deviation < 0.25)
                                    {
                                        fprintf(data, "Y,");
                                        printf("Channel 3: SS");
                                    }
                                    else
                                    {
                                        fprintf(data,"N,");
                                        printf("Channel 3: T");
                                    }
                                }
                                else 
                                {
                                    fprintf(data,"N,");
                                    printf("Channel 3: T");
                                }
                                break;
                        }
                        break;
                    case 3:
                        switch(channel) 
                        {
                            case 0:
                                bin4[j4] = valueF;
                                j4++;
                                if(j4 == size)
                                {
                                    j4 = 0;
                                    fill4++;
                                }
                                if(fill4 >= 1)
                                {
                                    deviation = calc_deviation(bin4);
                                    if(deviation < 0.25)
                                    {
                                        fprintf(data, "Y,");
                                        printf("\n\nChannel 4: SS\t\t");
                                    }
                                    else
                                    {
                                        fprintf(data,"N,");
                                        printf("\n\nChannel 4: T\t\t");
                                    }
                                }
                                else 
                                {
                                    fprintf(data,"N,");
                                    printf("\n\nChannel 4: T\t\t");
                                }
                                break;
                            case 1: 
                                bin5[j5] = valueF;
                                j5++;
                                if(j5 == size)
                                {
                                    j5 = 0;
                                    fill5++;
                                }
                                if(fill5 >= 1)
                                {
                                    deviation = calc_deviation(bin5);
                                    if(deviation < 0.25)
                                    {
                                        fprintf(data, "Y,");
                                        printf("Channel 5: SS\t\t");
                                    }
                                    else
                                    {
                                        fprintf(data,"N,");
                                        printf("Channel 5: T\t\t");
                                    }
                                }
                                else 
                                {
                                    fprintf(data,"N,");
                                    printf("Channel 5: T\t\t");
                                }
                                break;
                            case 2:
                                bin6[j6] = valueF;
                                j6++;
                                if(j6 == size)
                                {
                                    j6 = 0;
                                    fill6++;
                                }
                                if(fill6 >= 1)
                                {
                                    deviation = calc_deviation(bin6);
                                    if(deviation < 0.25)
                                    {
                                        fprintf(data, "Y,");
                                        printf("Channel 6: SS\t\t");
                                    }
                                    else
                                    {
                                        fprintf(data,"N,");
                                        printf("Channel 6: T\t\t"); 
                                    }
                                }
                                else 
                                {
                                    fprintf(data,"N,");
                                    printf("Channel 6: T\t\t");
                                }
                                break;
                            case 3:
                                bin7[j7] = valueF;
                                j7++;
                                if(j7 == size)
                                {
                                    j7 = 0;
                                    fill7++;
                                }
                                if(fill7 >= 1)
                                {
                                    deviation = calc_deviation(bin7);
                                    if(deviation < 0.25)
                                    {
                                        fprintf(data, "Y,");
                                        printf("Channel 7: SS");
                                    }
                                    else
                                    {
                                        fprintf(data,"N,");
                                            printf("Channel 7: T");
                                    }
                                }
                                else 
                                {
                                    fprintf(data,"N,");
                                    printf("Channel 7: T");
                                }
                                break;
                        }
                        break;
                    case 4:
                        switch(channel) 
                        {
                            case 0:
                                bin8[j8] = valueF;
                                j8++;
                                if(j8 == size)
                                {
                                    j8 = 0;
                                    fill8++;
                                }
                                if(fill8 >= 1)
                                {
                                    deviation = calc_deviation(bin8);
                                    if(deviation < 0.25)
                                    {
                                        fprintf(data, "Y,");
                                        printf("\n\nChannel 8: SS\t\t");
                                    }
                                    else
                                    {
                                        fprintf(data,"N,");
                                        printf("\n\nChannel 8: T\t\t");
                                    }
                                }
                                else 
                                {
                                    fprintf(data,"N,");
                                    printf("\n\nChannel 8: T\t\t");
                                }
                                break;
                            case 1: 
                                bin9[j9] = valueF;
                                j9++;
                                if(j9 == size)
                                {
                                    j9 = 0;
                                    fill9++;
                                }
                                if(fill9 >= 1)
                                {
                                    deviation = calc_deviation(bin9);
                                    if(deviation < 0.25)
                                    {
                                        fprintf(data, "Y,");
                                        printf("Channel 9: SS\t\t");
                                    }
                                    else
                                    {
                                        fprintf(data,"N,");
                                        printf("Channel 9: T\t\t");
                                    }
                                }
                                else 
                                {
                                    fprintf(data,"N,");
                                    printf("Channel 9: T\t\t");
                                }
                                break;
                            case 2:
                                bin10[j10] = valueF;
                                j10++;
                                if(j10 == size)
                                {
                                    j10 = 0;
                                    fill10++;
                                }
                                if(fill10 >= 1)
                                {
                                    deviation = calc_deviation(bin10);
                                    if(deviation < 0.25)
                                    {
                                        fprintf(data, "Y,");
                                        printf("Channel 10: SS\t\t");
                                    }
                                    else
                                    {
                                        fprintf(data,"N,");
                                        printf("Channel 10: T\t\t");
                                    }
                                }
                                else 
                                {
                                    fprintf(data,"N,");
                                    printf("Channel 10: T\t\t");
                                }
                                break;
                            case 3:
                                bin11[j11] = valueF;
                                j11++;
                                if(j11 == size)
                                {

                                    j11 = 0;
                                    fill11++;
                                }
                                if(fill11 >= 1)
                                {
                                    deviation = calc_deviation(bin11);
                                    if(deviation < 0.25)
                                    {
                                        fprintf(data, "Y,");
                                        printf("Channel 11: SS");
                                    }
                                    else
                                    {
                                        fprintf(data,"N,");
                                        printf("Channel 11: T");
                                    }
                                }
                                else 
                                {
                                    fprintf(data,"N,");
                                    printf("Channel 11: T");
                                }
                                break;
                        }
                        break;
                }                 
            }
            current = fopen("current_temp.csv", "w");
            fprintf(current, "Right, Left, Center,\n %f, %f, %f,", right, left, center);
            fclose(current);
        }                                

        fprintf(data, "\n");
        usleep(delay_between_reads * 1000);
    }

stop:
    result = mcc134_close(address);
    print_error(result);

    return 0;
}


void print_chars(FILE* data, char* time_seconds)
{
    for(int i = 8; i < 19; i++)
    {
        // If there's a space, print a ":" instead
        if((int)time_seconds[i] == 32) {
            // Only print the colon if we're not at index 8,
            // because 8 will be a space if hours is less
            // than 10
            if (i != 8) {
                fprintf(data, ":");
            } else {
                fprintf(data, "0");
            }
        }
        else
        {
            fprintf(data, "%c", time_seconds[i]);
        }
    }
    fprintf(data, ",");
}

double calc_deviation(double bin[size])
{
    double deviation = 0, sum = 0, mean = 0, temp = 0;
    for(int i = 0; i < size; i++)
    {
        sum += bin[i];
    }
    mean = sum/(double)size;
    for(int i = 0; i < size; i++)
    {
        temp += pow(bin[i]-mean, 2);
    }
    deviation = sqrt(temp/(double)size);
    return deviation;
}
